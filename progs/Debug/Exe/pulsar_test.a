;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : PulsarTest
;Version :
;Date    : 22.03.2016
;Author  : Volodya
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <pulsar_test.h>
;#include <delay.h>
;#include <stdio.h>
;
;void main(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0020     InitMCU();
;PCODE: $0000000E VOL: 0
; 0000 0021     //set_time_jam = 2;
; 0000 0022     set_time_jam = e_time_jam;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0023     cycle = e_cycle;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0024     p_puls = 1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0025     lcd_init(16);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0026     lcd_clear();
;PCODE: $0000001A VOL: 0
; 0000 0027     lcd_gotoxy(0,0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028     lcd_puts(">>>PULSAR TESTER");
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0029     lcd_gotoxy(0,1);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002A     lcd_puts("HNDL");
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002B     lcd_gotoxy(5,1);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C     sprintf(string,"C = %07u",cycle);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002D     lcd_puts(string);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002E     set_cycle = 0;
;PCODE: $0000003A VOL: 0
; 0000 002F     c = 0;
;PCODE: $0000003B VOL: 0
; 0000 0030     #asm("sei")
;PCODE: $0000003C VOL: 0
	sei
;PCODE: $0000003D VOL: 0
; 0000 0031 
; 0000 0032 while (1)
;PCODE: $0000003E VOL: 0
; 0000 0033       {
; 0000 0034         ReadKey();
;PCODE: $0000003F VOL: 0
; 0000 0035         ReadSensor();
;PCODE: $00000040 VOL: 0
; 0000 0036         SAS();
;PCODE: $00000041 VOL: 0
; 0000 0037         SM();
;PCODE: $00000042 VOL: 0
; 0000 0038         PressedKey = key_none;
;PCODE: $00000043 VOL: 0
; 0000 0039         ActiveSens = key_none;
;PCODE: $00000044 VOL: 0
; 0000 003A 
; 0000 003B         if(f.start){p_dwn = 1;f.start = 0;c = 1;};
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003C 
; 0000 003D         if(f.up)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003E         {
; 0000 003F             p_up = 0;f.up = 0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0040             if(set_cycle){p_dwn = 1;c = 1;}
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0041         };
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0042 
; 0000 0043         if(c==0){f.jam = 0;};
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0044         if(f.jam)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0045         {
; 0000 0046             if(set_time_jam <= time_jam_min)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0047             {
; 0000 0048                 jam = 0;
;PCODE: $0000006E VOL: 0
; 0000 0049                 f.jam = 0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004A                 p_up = 1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004B                 c = 0;
;PCODE: $00000075 VOL: 0
; 0000 004C                 cycle++;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 004D                 lcd_gotoxy(5,1);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004E                 sprintf(string,"C = %07u",cycle);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004F                 lcd_puts(string);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0050                 if(set_cycle){lcd_gotoxy(0,1);lcd_puts("AUTO");}
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0051                 else{lcd_gotoxy(0,1);lcd_puts("HNDL");};
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0052             }
; 0000 0053             else
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0054             {
; 0000 0055                 p_jam = 1;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0056                 timer_jam_on;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0057                 if(jam >= set_time_jam)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0058                 {
; 0000 0059                     p_jam = 0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005A                     timer_jam_off;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 005B                     jam = 0;
;PCODE: $000000AD VOL: 0
; 0000 005C                     f.jam = 0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005D                     p_up = 1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 005E                     c = 0;
;PCODE: $000000B4 VOL: 0
; 0000 005F                     cycle++;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0060                     lcd_gotoxy(5,1);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0061                     sprintf(string,"C = %07u",cycle);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0062                     lcd_puts(string);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0063                     if(set_cycle){lcd_gotoxy(0,1);lcd_puts("AUTO");}
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0064                     else{lcd_gotoxy(0,1);lcd_puts("HNDL");};
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0065                 };
;PCODE: $000000DD VOL: 0
; 0000 0066             };
;PCODE: $000000DE VOL: 0
; 0000 0067         };
;PCODE: $000000DF VOL: 0
; 0000 0068       }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0069 };
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0

	.DSEG
_0x5:
	.BYTE 0x2A
;
;void SM(void)
; 0000 006C {

	.CSEG
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 006D     switch(PressedKey)
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 006E     {
; 0000 006F         case key_start:
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0070         {
; 0000 0071             f.start = 1;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0072             lcd_gotoxy(5,1);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0073             sprintf(string,"C = %07u",cycle);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0074             break;
;PCODE: $000000FD VOL: 0
; 0000 0075         };
; 0000 0076         case key_auto:
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0077         {
; 0000 0078             if(set_cycle){set_cycle = 0;lcd_gotoxy(0,1);lcd_puts("HNDL");}
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0079             else
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 007A             {set_cycle = 1;lcd_gotoxy(0,1);lcd_puts("AUTO");};
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 007B             lcd_gotoxy(5,1);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 007C             sprintf(string,"C = %07u",cycle);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 007D             break;
;PCODE: $00000126 VOL: 0
; 0000 007E         };
; 0000 007F         case key_null:
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0080         {
; 0000 0081             cycle = 0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0082             lcd_gotoxy(5,1);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0083             sprintf(string,"C = %07u",cycle);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0084             lcd_puts(string);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0085             break;
;PCODE: $0000013D VOL: 0
; 0000 0086         };
; 0000 0087         case key_stop:
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0088         {
; 0000 0089             p_up = p_jam = p_dwn = f.start = set_cycle = f.jam = f.up = jam = 0;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 008A             p_puls = 1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 008B             timer_jam_off;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 008C             #asm("cli");
;PCODE: $0000017D VOL: 0
	cli
;PCODE: $0000017E VOL: 0
; 0000 008D             e_cycle = cycle;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 008E             #asm("sei");
;PCODE: $00000182 VOL: 0
	sei
;PCODE: $00000183 VOL: 0
; 0000 008F             lcd_gotoxy(0,1);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0090             lcd_puts("HNDL");
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0091             lcd_gotoxy(5,1);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0092             sprintf(string,"C = %07u",cycle);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0093             break;
;PCODE: $0000019A VOL: 0
; 0000 0094         };
; 0000 0095         case key_up:
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0096         {
; 0000 0097             if(set_time_jam<time_jam_max){set_time_jam++;};
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0098             lcd_gotoxy(5,1);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0099             sprintf(string,"J = %07u",set_time_jam);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 009A             lcd_puts(string);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 009B             break;
;PCODE: $000001B5 VOL: 0
; 0000 009C         };
; 0000 009D         case key_dwn:
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 009E         {
; 0000 009F             if(set_time_jam>time_jam_min){set_time_jam--;};
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00A0             lcd_gotoxy(5,1);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00A1             sprintf(string,"J = %07u",set_time_jam);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00A2             lcd_puts(string);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00A3             break;
;PCODE: $000001D0 VOL: 0
; 0000 00A4         };
; 0000 00A5         case key_jam_save:
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00A6         {
; 0000 00A7             #asm("cli");
;PCODE: $000001D4 VOL: 0
	cli
;PCODE: $000001D5 VOL: 0
; 0000 00A8             e_time_jam = set_time_jam;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00A9             #asm("sei");
;PCODE: $000001D9 VOL: 0
	sei
;PCODE: $000001DA VOL: 0
; 0000 00AA             lcd_gotoxy(0,1);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00AB             lcd_puts("SAVE");
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00AC             break;
;PCODE: $000001E2 VOL: 0
; 0000 00AD         };
; 0000 00AE     };
;PCODE: $000001E3 VOL: 0
; 0000 00AF };
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0

	.DSEG
_0x2A:
	.BYTE 0x14
;
;void SAS(void)
; 0000 00B2 {

	.CSEG
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00B3     switch(ActiveSens)
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00B4     {
; 0000 00B5         case key_bl1:{f.up = 1;break;};
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00B6         case key_bl2:
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00B7         {
; 0000 00B8             if(P_UP_IN){p_puls = 1;};
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00B9             if(P_DWN_IN){p_puls = 0;};
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00BA             break;
;PCODE: $000001FF VOL: 0
; 0000 00BB         };
; 0000 00BC         case key_bl3:
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00BD         {
; 0000 00BE             p_dwn = 0;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00BF             f.jam = 1;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 00C0             break;
;PCODE: $00000208 VOL: 0
; 0000 00C1         };
; 0000 00C2         case key_bl4:
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00C3         {
; 0000 00C4             p_up = p_jam = p_dwn = f.start = set_cycle = f.jam = f.up = jam = 0;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 00C5             p_puls = 1;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00C6             timer_jam_off;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00C7             lcd_gotoxy(0,1);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00C8             lcd_puts("CRSH");
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 00C9             break;
;PCODE: $0000024F VOL: 0
; 0000 00CA         };
; 0000 00CB     };
;PCODE: $00000250 VOL: 0
; 0000 00CC };
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0

	.DSEG
_0x52:
	.BYTE 0x5
;
;void ReadSensor(void)
; 0000 00CF {

	.CSEG
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 00D0     static unsigned char sens;                // êîä àêòèâíîãî ñåíñîðà
; 0000 00D1     static unsigned int CountSens;            // ñ÷åò÷èê àêòèâíîãî ñîñòîÿíèÿ
; 0000 00D2     if(ibl1==0){sens = key_bl1;}else
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 00D3     if(ibl2==0){sens = key_bl2;}else
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 00D4     if(ibl3==0){sens = key_bl3;}else
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 00D5     if(ibl4==0){sens = key_bl4;}
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 00D6     else{sens = key_none;};
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00D7 
; 0000 00D8     if(sens)
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 00D9     {
; 0000 00DA         CountSens++;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00DB         if(CountSens == ONE_SENS){ActiveSens = sens;};
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 00DC     }
; 0000 00DD     else
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 00DE     {
; 0000 00DF         CountSens = 0;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 00E0     };
;PCODE: $00000288 VOL: 0
; 0000 00E1 };
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;
;void ReadKey(void)
; 0000 00E4 {
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 00E5     static unsigned char key;                  //êîä íàæàòîé êëàâèøû
; 0000 00E6     static unsigned int CountKey;              //ñ÷åò÷èê íàæàòèé êëàâèøè
; 0000 00E7     static unsigned char buf_key;              //áóôåð åäåíè÷íîãî íàæàòèÿ
; 0000 00E8     static unsigned char f_old_key;            //ôëàã äîëãîãî íàæàòèÿ (èñêëþ÷àåò ñ÷èòûâàíèå îäèíî÷íîãî íàæàòèÿ ïîñëå óäå ...
; 0000 00E9     if((iup==0)&&(idwn==0)){key = key_jam_save;}else
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 00EA     if(istart==0){key = key_start;}else
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 00EB     if(istop==0){key = key_stop;}else
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00EC     if(iup==0){key = key_up;}else
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 00ED     if(idwn==0){key = key_dwn;}
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 00EE     else{key = key_none;};
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 00EF 
; 0000 00F0     if(key)
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 00F1     {
; 0000 00F2         if (CountKey>=old_press)
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 00F3         {
; 0000 00F4             switch (key)
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 00F5             {
; 0000 00F6                 case key_start:
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 00F7                 {
; 0000 00F8                     PressedKey = key_auto;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 00F9                     break;
;PCODE: $000002CA VOL: 0
; 0000 00FA                 };
; 0000 00FB                 case key_stop:
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 00FC                 {
; 0000 00FD                     PressedKey = key_null;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 00FE                     break;
;PCODE: $000002D0 VOL: 0
; 0000 00FF                 };
; 0000 0100                 case key_jam_save:
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0101                 {
; 0000 0102                     PressedKey = key_jam_save;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0103                     break;
;PCODE: $000002D6 VOL: 0
; 0000 0104                 };
; 0000 0105             };
;PCODE: $000002D7 VOL: 0
; 0000 0106             CountKey = 0;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0107             f_old_key = 1;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0108         };
;PCODE: $000002DC VOL: 0
; 0000 0109         buf_key = key;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 010A         CountKey++;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 010B     }
; 0000 010C     else
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 010D     {
; 0000 010E         if ((CountKey>=one_press)&&(!PressedKey)&&(!f_old_key))
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 010F         {
; 0000 0110             PressedKey = buf_key;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0111         };
;PCODE: $000002F3 VOL: 0
; 0000 0112         f_old_key = 0;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0113         CountKey = 0;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0114     };
;PCODE: $000002F8 VOL: 0
; 0000 0115 };
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)  // 0.1sec
; 0000 0118 {
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0119     TCNT1H=0xCF2C >> 8;                         // 10Hz
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 011A     TCNT1L=0xCF2C & 0xff;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 011B     jam++;
;PCODE: $00000301 VOL: 0
; 0000 011C };
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;
;void InitMCU(void)
; 0000 011F {
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0120     // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0121     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0122     // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0123     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0124 
; 0000 0125     // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0126     DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0127     // State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0128     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0129 
; 0000 012A     // Function: Bit7=Out Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 012B     DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 012C     // State: Bit7=0 Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 012D     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 012E 
; 0000 012F     // Timer/Counter 0 initialization
; 0000 0130     // Clock source: System Clock
; 0000 0131     // Clock value: Timer 0 Stopped
; 0000 0132     TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0133     TCNT0=0x00;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 0134 
; 0000 0135     // Timer/Counter 1 initialization
; 0000 0136     // Clock source: System Clock
; 0000 0137     // Clock value: 125,000 kHz
; 0000 0138     // Mode: Normal top=0xFFFF
; 0000 0139     // OC1A output: Disconnected
; 0000 013A     // OC1B output: Disconnected
; 0000 013B     // Noise Canceler: Off
; 0000 013C     // Input Capture on Falling Edge
; 0000 013D     // Timer Period: 0,1 s
; 0000 013E     // Timer1 Overflow Interrupt: On
; 0000 013F     // Input Capture Interrupt: Off
; 0000 0140     // Compare A Match Interrupt: Off
; 0000 0141     // Compare B Match Interrupt: Off
; 0000 0142     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0143     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0144     TCNT1H=0xCF;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0145     TCNT1L=0x2C;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0146     ICR1H=0x00;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 0147     ICR1L=0x00;
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0148     OCR1AH=0x00;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0149     OCR1AL=0x00;
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 014A     OCR1BH=0x00;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 014B     OCR1BL=0x00;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 014C 
; 0000 014D     // Timer/Counter 2 initialization
; 0000 014E     // Clock source: System Clock
; 0000 014F     // Clock value: Timer2 Stopped
; 0000 0150     // Mode: Normal top=0xFF
; 0000 0151     // OC2 output: Disconnected
; 0000 0152     ASSR=0<<AS2;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0153     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0154     TCNT2=0x00;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 0155     OCR2=0x00;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0156 
; 0000 0157     //îòêëþ÷åíû âñå òàéìåðû
; 0000 0158     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0159 
; 0000 015A     // External Interrupt(s) initialization
; 0000 015B     // INT0: Off
; 0000 015C     // INT1: Off
; 0000 015D     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 015E 
; 0000 015F     // USART initialization
; 0000 0160     // USART disabled
; 0000 0161     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0162 
; 0000 0163     // Analog Comparator initialization
; 0000 0164     // Analog Comparator: Off
; 0000 0165     // The Analog Comparator's positive input is
; 0000 0166     // connected to the AIN0 pin
; 0000 0167     // The Analog Comparator's negative input is
; 0000 0168     // connected to the AIN1 pin
; 0000 0169     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 016A     SFIOR=(0<<ACME);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 016B 
; 0000 016C     // ADC initialization
; 0000 016D     // ADC disabled
; 0000 016E     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 016F 
; 0000 0170     // SPI initialization
; 0000 0171     // SPI disabled
; 0000 0172     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0173 
; 0000 0174     // TWI initialization
; 0000 0175     // TWI disabled
; 0000 0176     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0177 
; 0000 0178     // Alphanumeric LCD initialization
; 0000 0179     // Connections are specified in the
; 0000 017A     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 017B     // RS - PORTD Bit 7
; 0000 017C     // RD - PORTB Bit 0
; 0000 017D     // EN - PORTB Bit 1
; 0000 017E     // D4 - PORTB Bit 2
; 0000 017F     // D5 - PORTB Bit 3
; 0000 0180     // D6 - PORTB Bit 4
; 0000 0181     // D7 - PORTB Bit 5
; 0000 0182     // Characters/line: 8
; 0000 0183 };
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
